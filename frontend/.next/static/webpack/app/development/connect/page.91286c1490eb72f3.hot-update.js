"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/development/connect/page",{

/***/ "(app-pages-browser)/./src/services/projectsService.ts":
/*!*****************************************!*\
  !*** ./src/services/projectsService.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyToProject: () => (/* binding */ applyToProject),\n/* harmony export */   declineProject: () => (/* binding */ declineProject),\n/* harmony export */   getAppliedProjects: () => (/* binding */ getAppliedProjects),\n/* harmony export */   getEmptyProjects: () => (/* binding */ getEmptyProjects),\n/* harmony export */   getProjects: () => (/* binding */ getProjects),\n/* harmony export */   getSampleProjects: () => (/* binding */ getSampleProjects),\n/* harmony export */   getSavedProjects: () => (/* binding */ getSavedProjects),\n/* harmony export */   purgeUserData: () => (/* binding */ purgeUserData),\n/* harmony export */   removeProject: () => (/* binding */ removeProject),\n/* harmony export */   saveProject: () => (/* binding */ saveProject),\n/* harmony export */   undoLastAction: () => (/* binding */ undoLastAction)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _config_firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/config/firebase */ \"(app-pages-browser)/./src/config/firebase.ts\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _services_authService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/authService */ \"(app-pages-browser)/./src/services/authService.ts\");\n\n\n\n\nconst API_URL = \"http://localhost:5001/fruition-dev/us-central1/api\" || 0;\nconst IS_DEV =  true || 0;\n// Helper function to get auth headers for API requests\nconst getAuthHeaders = ()=>{\n    const token = localStorage.getItem('authToken');\n    return {\n        Authorization: token ? \"Bearer \".concat(token) : '',\n        'Content-Type': 'application/json'\n    };\n};\n// Firestore helper functions\nconst getUserDataRef = (userId)=>{\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_config_firebase__WEBPACK_IMPORTED_MODULE_0__.db, 'userData', userId);\n};\n// Get user data from Firestore\nconst getUserDataFromFirestore = async (userId, field, defaultValue)=>{\n    try {\n        // Check if Firestore is initialized\n        if (!_config_firebase__WEBPACK_IMPORTED_MODULE_0__.db) {\n            console.error('Firestore not initialized');\n            return defaultValue;\n        }\n        const userDocRef = getUserDataRef(userId);\n        const userDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(userDocRef);\n        if (userDoc.exists() && userDoc.data()[field] !== undefined) {\n            return userDoc.data()[field];\n        }\n        return defaultValue;\n    } catch (error) {\n        console.error(\"Error getting \".concat(field, \" from Firestore:\"), error);\n        return defaultValue;\n    }\n};\n// Store user data in Firestore\nconst storeUserDataInFirestore = async (userId, field, data)=>{\n    try {\n        // Check if Firestore is initialized\n        if (!_config_firebase__WEBPACK_IMPORTED_MODULE_0__.db) {\n            console.error('Firestore not initialized');\n            return;\n        }\n        const userDocRef = getUserDataRef(userId);\n        const userDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(userDocRef);\n        if (userDoc.exists()) {\n            // Update existing document\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userDocRef, {\n                [field]: data,\n                updatedAt: new Date().toISOString()\n            });\n        } else {\n            // Create new document\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(userDocRef, {\n                userId,\n                [field]: data,\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString()\n            });\n        }\n    } catch (error) {\n        console.error(\"Error storing \".concat(field, \" in Firestore:\"), error);\n        throw error; // Rethrow to allow handling by the caller\n    }\n};\n// Get projects from the API\nconst getProjects = async ()=>{\n    // In development, immediately return sample data\n    if (IS_DEV) {\n        console.log('Development mode: Using sample projects data');\n        // Use try-catch to handle potential auth state issues\n        try {\n            // Wait for auth to be initialized\n            const authenticated = await (0,_services_authService__WEBPACK_IMPORTED_MODULE_2__.isAuthenticated)();\n            if (!authenticated) {\n                console.log('No authenticated user, returning all sample projects');\n                return getSampleProjects();\n            }\n            const user = await (0,_services_authService__WEBPACK_IMPORTED_MODULE_2__.getCurrentUser)();\n            if (!user) {\n                console.log('No authenticated user after check, returning all sample projects');\n                return getSampleProjects();\n            }\n            // Get saved, applied, and declined project IDs from Firestore\n            const savedProjectIds = await getUserDataFromFirestore(user.uid, 'savedProjects', []);\n            const appliedProjectIds = await getUserDataFromFirestore(user.uid, 'appliedProjects', []);\n            const declinedProjectIds = await getUserDataFromFirestore(user.uid, 'declinedProjects', []);\n            const excludedIds = [\n                ...savedProjectIds,\n                ...appliedProjectIds,\n                ...declinedProjectIds\n            ];\n            // Filter out projects that are already saved, applied, or declined\n            return getSampleProjects().filter((project)=>!excludedIds.includes(project.id));\n        } catch (error) {\n            console.error('Error fetching user data from Firestore:', error);\n            // Fallback to all sample projects if Firestore fails\n            return getSampleProjects();\n        }\n    }\n    // Production API call logic\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(\"\".concat(API_URL, \"/connect/recommended\"), {\n            headers: getAuthHeaders()\n        });\n        if (response.data.success) {\n            return response.data.data || [];\n        }\n        // Fallback to sample data if the API doesn't return any projects\n        return getSampleProjects();\n    } catch (error) {\n        console.error('Error fetching projects:', error);\n        // Fallback to sample data if the API call fails\n        return getSampleProjects();\n    }\n};\n// Get saved projects from the API\nconst getSavedProjects = async ()=>{\n    // In development, immediately return sample data\n    if (IS_DEV) {\n        console.log('Development mode: Using sample saved projects data');\n        // Use try-catch to handle potential auth state issues\n        try {\n            // Wait for auth to be initialized\n            const authenticated = await (0,_services_authService__WEBPACK_IMPORTED_MODULE_2__.isAuthenticated)();\n            if (!authenticated) {\n                console.log('No authenticated user, returning empty saved projects');\n                return [];\n            }\n            const user = await (0,_services_authService__WEBPACK_IMPORTED_MODULE_2__.getCurrentUser)();\n            if (!user) {\n                console.log('No authenticated user after check, returning empty saved projects');\n                return [];\n            }\n            // Get saved project IDs from Firestore\n            const savedProjectIds = await getUserDataFromFirestore(user.uid, 'savedProjects', []);\n            console.log('Saved project IDs:', savedProjectIds);\n            // Return projects with these IDs\n            return getSampleProjects().filter((project)=>savedProjectIds.includes(project.id)).map((project)=>({\n                    ...project,\n                    id: \"saved_\".concat(project.id) // Ensure unique IDs for React keys\n                }));\n        } catch (error) {\n            console.error('Error fetching saved projects from Firestore:', error);\n            return [];\n        }\n    }\n    // Production API call logic\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(\"\".concat(API_URL, \"/connect/saved\"), {\n            headers: getAuthHeaders()\n        });\n        if (response.data.success) {\n            return response.data.data || [];\n        }\n        return [];\n    } catch (error) {\n        console.error('Error fetching saved projects:', error);\n        return [];\n    }\n};\n// Get applied projects from the API\nconst getAppliedProjects = async ()=>{\n    // In development, immediately return sample data\n    if (IS_DEV) {\n        console.log('Development mode: Using sample applied projects data');\n        // Use try-catch to handle potential auth state issues\n        try {\n            // Wait for auth to be initialized\n            const authenticated = await (0,_services_authService__WEBPACK_IMPORTED_MODULE_2__.isAuthenticated)();\n            if (!authenticated) {\n                console.log('No authenticated user, returning empty applied projects');\n                return [];\n            }\n            const user = await (0,_services_authService__WEBPACK_IMPORTED_MODULE_2__.getCurrentUser)();\n            if (!user) {\n                console.log('No authenticated user after check, returning empty applied projects');\n                return [];\n            }\n            // Get applied project IDs from Firestore\n            const appliedProjectIds = await getUserDataFromFirestore(user.uid, 'appliedProjects', []);\n            console.log('Applied project IDs:', appliedProjectIds);\n            // Return projects with these IDs\n            return getSampleProjects().filter((project)=>appliedProjectIds.includes(project.id)).map((project)=>({\n                    ...project,\n                    id: \"applied_\".concat(project.id) // Ensure unique IDs for React keys\n                }));\n        } catch (error) {\n            console.error('Error fetching applied projects from Firestore:', error);\n            return [];\n        }\n    }\n    // Production API call logic\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(\"\".concat(API_URL, \"/connect/applied\"), {\n            headers: getAuthHeaders()\n        });\n        if (response.data.success) {\n            return response.data.data || [];\n        }\n        return [];\n    } catch (error) {\n        console.error('Error fetching applied projects:', error);\n        return [];\n    }\n};\n// Apply to a project\nconst applyToProject = async (projectId)=>{\n    // In development, immediately return success\n    if (IS_DEV) {\n        console.log(\"Development mode: Simulating apply to project \".concat(projectId));\n        const currentUser = _config_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser;\n        if (!currentUser) {\n            console.error('Cannot apply to project: No authenticated user');\n            return false;\n        }\n        try {\n            // Get current applied projects\n            const appliedProjectIds = await getUserDataFromFirestore(currentUser.uid, 'appliedProjects', []);\n            // Only add if not already in the list\n            if (!appliedProjectIds.includes(projectId)) {\n                const updatedAppliedProjects = [\n                    ...appliedProjectIds,\n                    projectId\n                ];\n                // Store in Firestore\n                await storeUserDataInFirestore(currentUser.uid, 'appliedProjects', updatedAppliedProjects);\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error applying to project \".concat(projectId, \":\"), error);\n            return false;\n        }\n    }\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].post(\"\".concat(API_URL, \"/projects/\").concat(projectId, \"/apply\"), {}, {\n            headers: getAuthHeaders()\n        });\n        return response.data.success || false;\n    } catch (error) {\n        console.error(\"Error applying to project \".concat(projectId, \":\"), error);\n        return false;\n    }\n};\n// Save a project\nconst saveProject = async (projectId)=>{\n    // In development, immediately return success\n    if (IS_DEV) {\n        console.log(\"Development mode: Simulating save project \".concat(projectId));\n        const currentUser = _config_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser;\n        if (!currentUser) {\n            console.error('Cannot save project: No authenticated user');\n            return false;\n        }\n        try {\n            // Get current saved projects\n            const savedProjectIds = await getUserDataFromFirestore(currentUser.uid, 'savedProjects', []);\n            // Only add if not already in the list\n            if (!savedProjectIds.includes(projectId)) {\n                const updatedSavedProjects = [\n                    ...savedProjectIds,\n                    projectId\n                ];\n                // Store in Firestore\n                await storeUserDataInFirestore(currentUser.uid, 'savedProjects', updatedSavedProjects);\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error saving project \".concat(projectId, \":\"), error);\n            return false;\n        }\n    }\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].post(\"\".concat(API_URL, \"/connect/save/\").concat(projectId), {}, {\n            headers: getAuthHeaders()\n        });\n        return response.data.success || false;\n    } catch (error) {\n        console.error(\"Error saving project \".concat(projectId, \":\"), error);\n        return false;\n    }\n};\n// Decline a project\nconst declineProject = async (projectId)=>{\n    // In development, immediately return success\n    if (IS_DEV) {\n        console.log(\"Development mode: Simulating decline project \".concat(projectId));\n        const currentUser = _config_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser;\n        if (!currentUser) {\n            console.error('Cannot decline project: No authenticated user');\n            return false;\n        }\n        try {\n            // Get current declined projects\n            const declinedProjectIds = await getUserDataFromFirestore(currentUser.uid, 'declinedProjects', []);\n            // Only add if not already in the list\n            if (!declinedProjectIds.includes(projectId)) {\n                const updatedDeclinedProjects = [\n                    ...declinedProjectIds,\n                    projectId\n                ];\n                // Store in Firestore\n                await storeUserDataInFirestore(currentUser.uid, 'declinedProjects', updatedDeclinedProjects);\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error declining project \".concat(projectId, \":\"), error);\n            return false;\n        }\n    }\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].post(\"\".concat(API_URL, \"/connect/decline/\").concat(projectId), {}, {\n            headers: getAuthHeaders()\n        });\n        return response.data.success || false;\n    } catch (error) {\n        console.error(\"Error declining project \".concat(projectId, \":\"), error);\n        return false;\n    }\n};\n// Remove a saved project\nconst removeProject = async (projectId)=>{\n    // In development, immediately return success\n    if (IS_DEV) {\n        console.log(\"Development mode: Simulating remove project \".concat(projectId));\n        const currentUser = _config_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser;\n        if (!currentUser) {\n            console.error('Cannot remove project: No authenticated user');\n            return false;\n        }\n        try {\n            // Get current saved projects\n            const savedProjectIds = await getUserDataFromFirestore(currentUser.uid, 'savedProjects', []);\n            // Remove the project ID from the list\n            const updatedSavedProjects = savedProjectIds.filter((id)=>id !== projectId.replace('saved_', ''));\n            // Store in Firestore\n            await storeUserDataInFirestore(currentUser.uid, 'savedProjects', updatedSavedProjects);\n            return true;\n        } catch (error) {\n            console.error(\"Error removing project \".concat(projectId, \":\"), error);\n            return false;\n        }\n    }\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].delete(\"\".concat(API_URL, \"/connect/saved/\").concat(projectId), {\n            headers: getAuthHeaders()\n        });\n        return response.data.success || false;\n    } catch (error) {\n        console.error(\"Error removing project \".concat(projectId, \":\"), error);\n        return false;\n    }\n};\n// For testing: Return empty projects\nconst getEmptyProjects = async ()=>{\n    console.log('Development mode: Testing with empty projects');\n    return [];\n};\n// Sample projects data for fallback\nconst getSampleProjects = ()=>{\n    return [\n        {\n            id: '1',\n            title: 'Predicting Housing Prices Using Advanced Machine Learning Models',\n            description: 'This project explores the application of machine learning techniques to predict housing prices based on features such as location, square footage, and neighborhood amenities.',\n            faculty: 'Dr. Jane Smith',\n            department: 'Computer Science',\n            skills: [\n                'Python',\n                'Machine Learning',\n                'Data Analysis'\n            ],\n            duration: '3 months',\n            commitment: '10 hours/week'\n        },\n        {\n            id: '2',\n            title: 'Modeling Climate Change Impact on Regional Crop Yields',\n            description: 'This project examines how climate change variables—temperature, precipitation, and CO₂ levels—affect crop yields using time-series analysis and geospatial modeling.',\n            faculty: 'Dr. Michael Kim',\n            department: 'Environmental Science',\n            skills: [\n                'Python',\n                'TensorFlow',\n                'Geospatial Analysis'\n            ],\n            duration: '6 months',\n            commitment: '15 hours/week'\n        },\n        {\n            id: '3',\n            title: 'Developing a Mobile App for Mental Health Monitoring',\n            description: 'This project involves creating a mobile application that helps users track their mental health metrics over time, providing insights and suggesting resources when needed.',\n            faculty: 'Dr. Sarah Johnson',\n            department: 'Psychology',\n            skills: [\n                'React Native',\n                'JavaScript',\n                'UI/UX Design'\n            ],\n            duration: '4 months',\n            commitment: '12 hours/week'\n        },\n        {\n            id: '4',\n            title: 'Analyzing Social Media Discourse on Public Health Issues',\n            description: 'This project uses natural language processing to analyze how public health topics are discussed across different social media platforms and demographic groups.',\n            faculty: 'Dr. Robert Chen',\n            department: 'Public Health',\n            skills: [\n                'NLP',\n                'Data Mining',\n                'Statistical Analysis'\n            ],\n            duration: '5 months',\n            commitment: '8 hours/week'\n        },\n        {\n            id: '5',\n            title: 'Quantum Computing Algorithms for Optimization Problems',\n            description: 'This project explores how quantum computing can be applied to solve complex optimization problems that are computationally intensive for classical computers.',\n            faculty: 'Dr. Emily Rodriguez',\n            department: 'Physics',\n            skills: [\n                'Quantum Computing',\n                'Algorithm Design',\n                'Linear Algebra'\n            ],\n            duration: '6 months',\n            commitment: '20 hours/week'\n        }\n    ];\n};\n// Completely clear all data for a specific user (for account deletion or testing)\nconst purgeUserData = async (userId)=>{\n    try {\n        // Delete the user document from Firestore\n        const userDocRef = getUserDataRef(userId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(userDocRef, {\n            userId,\n            savedProjects: [],\n            appliedProjects: [],\n            declinedProjects: [],\n            updatedAt: new Date().toISOString()\n        });\n        console.log(\"Purged all data for user: \".concat(userId, \" in Firestore\"));\n    } catch (error) {\n        console.error(\"Error purging data for user \".concat(userId, \":\"), error);\n    }\n};\n// Undo last action\nconst undoLastAction = async ()=>{\n    // In development, immediately return success\n    if (IS_DEV) {\n        console.log(\"Development mode: Simulating undo last action\");\n        const currentUser = _config_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser;\n        if (!currentUser) {\n            console.error('Cannot undo last action: No authenticated user');\n            return {\n                success: false,\n                message: 'No authenticated user'\n            };\n        }\n        try {\n            // Instead of querying userActions collection which might not exist,\n            // we'll use a simpler approach for development mode\n            // First check if there are any saved projects\n            const savedProjectIds = await getUserDataFromFirestore(currentUser.uid, 'savedProjects', []);\n            if (savedProjectIds.length > 0) {\n                // Undo the most recent saved project (remove the last one)\n                const projectIdToRemove = savedProjectIds[savedProjectIds.length - 1];\n                const updatedSavedProjects = savedProjectIds.filter((id)=>id !== projectIdToRemove);\n                await storeUserDataInFirestore(currentUser.uid, 'savedProjects', updatedSavedProjects);\n                // Log the action for debugging\n                console.log(\"Undid save action for project \".concat(projectIdToRemove));\n                return {\n                    success: true,\n                    message: \"Successfully undid save action for project \".concat(projectIdToRemove),\n                    undoneProjectId: projectIdToRemove\n                };\n            }\n            // If no saved projects, check applied projects\n            const appliedProjectIds = await getUserDataFromFirestore(currentUser.uid, 'appliedProjects', []);\n            if (appliedProjectIds.length > 0) {\n                // Undo the most recent applied project (remove the last one)\n                const projectIdToRemove = appliedProjectIds[appliedProjectIds.length - 1];\n                const updatedAppliedProjects = appliedProjectIds.filter((id)=>id !== projectIdToRemove);\n                await storeUserDataInFirestore(currentUser.uid, 'appliedProjects', updatedAppliedProjects);\n                // Log the action for debugging\n                console.log(\"Undid apply action for project \".concat(projectIdToRemove));\n                return {\n                    success: true,\n                    message: \"Successfully undid apply action for project \".concat(projectIdToRemove),\n                    undoneProjectId: projectIdToRemove\n                };\n            }\n            // If no applied projects, check declined projects\n            const declinedProjectIds = await getUserDataFromFirestore(currentUser.uid, 'declinedProjects', []);\n            if (declinedProjectIds.length > 0) {\n                // Undo the most recent declined project (remove the last one)\n                const projectIdToRemove = declinedProjectIds[declinedProjectIds.length - 1];\n                const updatedDeclinedProjects = declinedProjectIds.filter((id)=>id !== projectIdToRemove);\n                await storeUserDataInFirestore(currentUser.uid, 'declinedProjects', updatedDeclinedProjects);\n                // Log the action for debugging\n                console.log(\"Undid decline action for project \".concat(projectIdToRemove));\n                return {\n                    success: true,\n                    message: \"Successfully undid decline action for project \".concat(projectIdToRemove),\n                    undoneProjectId: projectIdToRemove\n                };\n            }\n            // If we get here, there are no actions to undo\n            return {\n                success: false,\n                message: 'No actions to undo'\n            };\n        } catch (error) {\n            console.error(\"Error undoing last action:\", error);\n            return {\n                success: false,\n                message: 'Error undoing last action'\n            };\n        }\n    }\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].post(\"\".concat(API_URL, \"/connect/undo\"), {}, {\n            headers: getAuthHeaders()\n        });\n        return {\n            ...response.data,\n            undoneProjectId: response.data.undoneProjectId || undefined\n        };\n    } catch (error) {\n        console.error(\"Error undoing last action:\", error);\n        return {\n            success: false,\n            message: error instanceof Error ? error.message : 'Unknown error'\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/projectsService.ts\n"));

/***/ })

});