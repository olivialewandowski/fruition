rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUserRole(role) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isAdmin() {
      return isUserRole('admin');
    }
    
    function isFaculty() {
      return isUserRole('faculty');
    }
    
    function isStudent() {
      return isUserRole('student');
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // PUBLIC COLLECTIONS FOR LANDING PAGE 
    // Allow full access to waitlistprojects collection WITHOUT authentication
    match /waitlistprojects/{projectId} {
      allow read, write: if true;
    }
    
    // Allow full access to waitlist collection WITHOUT authentication
    match /waitlist/{docId} {
      allow read, write: if true;
    }
    
    // Rest of your rules...
    function isProjectMentor(projectId) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/projects/$(projectId)) &&
        get(/databases/$(database)/documents/projects/$(projectId)).data.mentorId == request.auth.uid;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // UserData collection
    match /userData/{userId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
      
      // Explicitly allow access to specific fields for the owner
      match /actionHistory {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
      
      match /savedProjects {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
      
      match /appliedProjects {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
      
      match /declinedProjects {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
    }
    
    // Projects collection
    match /projects/{projectId} {
      allow read: if true; // Anyone can read project data
      allow create: if isSignedIn(); // Any authenticated user can create projects
      allow update: if isSignedIn() && (isProjectMentor(projectId) || isAdmin());
      allow delete: if isSignedIn() && (isProjectMentor(projectId) || isAdmin());
    }
    
    // Positions collection
    match /positions/{positionId} {
      allow read: if true;
      allow create: if isSignedIn(); // Any authenticated user can create positions
      allow update: if isSignedIn() && (
        resource.data.projectId == null || 
        isProjectMentor(resource.data.projectId) || 
        isAdmin()
      );
      allow delete: if isSignedIn() && (
        resource.data.projectId == null || 
        isProjectMentor(resource.data.projectId) || 
        isAdmin()
      );
    }
    
    // Applications collection
    match /applications/{applicationId} {
      allow read: if isSignedIn() && (
        resource.data.studentId == request.auth.uid || 
        isProjectMentor(resource.data.projectId) || 
        isAdmin()
      );
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        resource.data.studentId == request.auth.uid || 
        isProjectMentor(resource.data.projectId) || 
        isAdmin()
      );
      allow delete: if isSignedIn() && (
        isProjectMentor(resource.data.projectId) || 
        isAdmin()
      );
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow write: if isAdmin();
    }
    
    // System stats - admin only
    match /system/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
  }
}